#!/usr/bin/env python

import os,sys
dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(dir + '/lib')

from common import *

NAME = 'ackstorm-sync'
PID_FILE = './var/' + NAME + '.pid'
VALID_ARGS = ['stop','start','restart','status']

# Chdir to main folder
os.chdir(dir + '/..')

# Read role config and start process
config = load_config_role('./etc/role_conf.py')
if config.role == 'master':
  import master as role
  process = role.SyncMaster()

elif config.role == 'slave':
  import slave as role
  process = role.SyncSlave()

else:
  raise RuntimeError, 'Unable to get role'
  sys.exit(1)
  
if len(sys.argv) < 2 or len(sys.argv) > 3 or \
  not sys.argv[1] in VALID_ARGS:
    print '[ERROR] Invalid arguments: %s' % '|'.join(VALID_ARGS)
    sys.exit(1)
    
if 'status' in sys.argv:
  if pid_file_check(PID_FILE):
    print '[OK] ' + NAME + ': %s is running' % config.role.upper()
    sys.exit(0)
    
  print '[ERROR] ' + NAME + ': %s is not running' % config.role.upper()
  sys.exit(1)
  
if 'stop' in sys.argv or 'restart' in sys.argv:
  pid = pid_file_check(PID_FILE)
  if pid:
    import signal
    os.kill(int(pid), signal.SIGTERM)
    pid_file_del(PID_FILE)
    print '[OK] ' + NAME + ': %s SIGTERM send' % config.role.upper()
    
  else:
    print '[ERROR] ' + NAME + ': %s is not running' % config.role.upper()
    if 'stop' in sys.argv: sys.exit(1)
  
  # If stop got out  
  if 'stop' in sys.argv:
     sys.exit(0)
  
# start or restart
print '[OK] Starting ' + NAME + ': %s' % config.role.upper()

if process.config.daemonize:
  if fork():
    print '[OK] Main Process forked'
    sys.exit(0) # Parent dies here
  
# Run main process
os.chdir(dir + '/..')
process.run(PID_FILE)

