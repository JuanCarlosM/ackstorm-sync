#!/usr/bin/env python

import os,sys
dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(dir + '/lib')

from common import *

PID_FILE = './var/ackstorm-sync.pid'

# Chdir to main folder
os.chdir(dir + '/..')

# Read role config and start process
config = load_config_role('./etc/role_conf.py')
if config.role == 'master':
  import master as role
  process = role.SyncMaster()

elif config.role == 'slave':
  import slave as role
  process = role.SyncSlave()

else:
  raise RuntimeError, "Unable to get role"
  sys.exit(1)

if len(sys.argv) < 2 or len(sys.argv) > 3:
  print "[ERROR] Invalid arguments (stop|start|restart)"
  sys.exit(1)
    
if 'status' in sys.argv:
  if check_pid_file(PID_FILE):
    print "[OK] ackstorm-sync: %s is running" % config.role.upper()
    sys.exit(0)
    
  print "[ERROR] ackstorm-sync: %s is not running" % config.role.upper()
  sys.exit(1)
  
if 'stop' in sys.argv or 'restart' in sys.argv:
  pid = check_pid_file(PID_FILE)
  if pid:
    import signal
    os.kill(int(pid), signal.SIGTERM)
    del_pid_file(PID_FILE)
    print "[OK] ackstorm-sync: %s killed" % config.role.upper()
    
  else:
    print "[ERROR] ackstorm-sync: %s is not running" % config.role.upper()
    if 'stop' in sys.argv: sys.exit(1)
    
  if 'stop' in sys.argv: sys.exit(0)
  
# start or restart
print "Starting ackstorm-sync: %s" % config.role.upper()

if process.config.daemonize:
  if fork():
    sys.exit(0) # Parent dies here
  
# Run main process
os.chdir(dir + '/..')
process.run(PID_FILE)

